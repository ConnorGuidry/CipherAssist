package ConnorGuidry.crypto.BSA512;

import java.io.UnsupportedEncodingException;

public class DemoBSA512 
{

	public static void main(String[] args) throws InterruptedException, UnsupportedEncodingException 
	{
		
		
		String str = "abcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnopabcdefghijklmnop";
		
		
		BSA512 bsa = new BSA512(str, "5D44B5D354C71F91F58C45D21D3575D44B5D354C71F91F58C45D21D357");
		
		//bsa.initZeros();
		//bsa.initPaddedMessage();
		
		//System.out.println(bsa.messageString);
		//bsa.initZeros();
		//System.out.println(bsa.nodes);
		System.out.println(bsa.encrypt());
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		/*
		
		BinaryStackTree tree = new BinaryStackTree();
		
		BinaryStackTree.generateNodes(tree, 3);
		
		
		char[] mychars;
		
		mychars = str.toCharArray();
		
		tree.postOrderLoad(mychars);
		
		char[]  newchars = tree.levelOrderUnload();
		String resultString = new String(newchars);
		
		System.out.println(("char[] encrypted chars: " + resultString));
		
		String cipherString = "pnomkljhigefdbcaopnlmkijhfgecdbpaomnljkighfdecabpnomkljhigefdbcaopnlmkijhfgecdbpaomnljkighfdecabpnomkljhigefdbcaopnlmkijhfgecdbpaomnljkighfdecabpnomkljhigefdbcaopnlmkijhfgecdbpaomnljkighfdecabpnomkljhigefdbcaopnlmkijhfgecdbpaomnljkighfdecabpnomkljhigefdbcaopnlmkijhfgecdbpaomnljkighfdecabpnomkljhigefdbcaopnlmkijhfgecdbpaomnljkighfdecabpnomkljhigefdbcaopnlmkijhfgecdbpaomnljkighfdecabpnomkljhigefdbcaopnlmkijhfgecdbpaomnljkighfdecabpnomkljhigefdbcaopnlmkijhfgecdbpaomnljkighfdecabpnomkljhigefdbcaopnlmkijhfgecdbpaomnljkighfdecabpnomkljhigefdbcaopnlmkijhfgecdbpaomnljkighfdecabpnomkljhigefdbcaopnlmkijhfgecdbpaomnljkighfdecabpnomkljhigefdbcaopnlmkijhfgecdbpaomnljkighfdecabpnomkljhigefdbcaopnlmkijhfgecdbpaomnljkighfdecabpnomkljhigefdbcaopnlmkijhfgecdbpaomnljkighfdecabpnomkljhigefdbcaopnlmkijhfgecdbpaomnljkighfdecabpnomkljhigefdbcaopnlmkijhfgecdbpaomnljkighfdecabpnomkljhigefdbcaopnlmkijhfgecdbpaomnljkighfdecabpnomkljhigefdbcaopnlmkijhfgecdbpaomnljkighfdecabpnomkljhigefdbcaopnlmkijhfgecdbpaomnljkighfdecabpnomkljhigefdbcaopnlmkijhfgecdbpaomnljkighfdecabpnomkljhigefdbcaopnlmkijhfgecdbpaomnljkighfdecabpnomkljhigefdbcaopnlmkijhfgecdbpaomnljkighfdecabpnomkljhigefdbcaopnlmkijhfgecdbpaomnljkighfdecabpnomkljhigefdbcaopnlmkijhfgecdbpaomnljkighfdecabpnomkljhigefdbcaopnlmkijhfgecdbpaomnljkighfdecabpnomkljhigefdbcaopnlmkijhfgecdbpaomnljkighfdecabpnomkljhigefdbcaopnlmkijhfgecdbpaomnljkighfdecabpnomkljhigefdbcaopnlmkijhfgecdbpaomnljkighfdecabpnomkljhigefdbcaopnlmkijhfgecdbpaomnljkighfdecabpnomkljhigefdbcaopnlmkijhfgecdbpaomnljkighfdecab";
		
		char[] cipherChars = cipherString.toCharArray();
		
		tree.levelOrderLoad(cipherChars);
		
		char[] plainChars = tree.postOrderUnload();
		String plaintext = new String(plainChars);
		
		System.out.println(("char[] decrypted chars: " + plaintext)); 
		
		
		*/
		
	}

}
